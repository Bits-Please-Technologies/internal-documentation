{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"project-documentation/speed-money-wise/","text":"Speed Money Wise Portal \u00b6 What is the project? \u00b6 Speed Money Wise is a multinational financial services company, that enables clients to transfer money across the world almost instantaneously. The company currently uses WhatsApp to keep track of transactions made which has proven to be very inefficient. The solution we shall provide is a web portal that allows the company to efficiently administrate its transactions and keep track of the customers involved in those transactions. Next to those core functionalities, the system will also have settings that allow the administrator (superuser) to input supporting data for the transaction creation process and to manage the access control of the users in the system. Figure 1: High-Level Overview Of Process Flow How will we build the project? \u00b6 The infrastructure of this project is split into 2 parts, the frontend, and the backend. Figure 2: High-Level Overview Of Project Infrastructure. The Frontend \u00b6 To build the frontend for this project we will be using the Typescript version of Next.js 13 in combination with TailwindCSS . Furthermore, we will be using various other packages to aid in certain aspects of the project. Authentication \u00b6 For the authentication part of our frontend application, we will utilize NextAuth which provides us with an easy way to authenticate our users and maintain a user session across our application. The provider we\u2019ll be using is the CredentialsProvider . The authentication system we will implement is a combination of access tokens and refresh tokens. The user will log into the system with their credentials and receive an access token and a refresh token. The access token will expire in a short amount of time which will cause the client to request a new token with the refresh token. Figure 3: Authentication Process Authorization \u00b6 There is a usePermission hook example User Interface \u00b6 The user interface of this application will be styled with TailwindCSS. The project will consist of a combination of completely custom-built components and some pre-built functional components that will be styled using tailwind. The libraries we'll be using for the \"headless\" components are Headless UI and Tanstack Table . Components \u00b6 The components that will have to be built for this project are: Sidebar Client Form Table Button Etc... The goal is to reuse build components we can reuse many times within this project but also future projects. Sidebar \u00b6 The sidebar component will be the main navigation component for this portal. The requirements for this component are: The component should accept items prop in which a config array can be passed. The sidebar will generate its sidebar item based on the objects in the array. The sidebar will use a permissions hook to determine if the user has the permissions to visit that route and will render based on that condition. Client Form \u00b6 The client form will be used to register client information. The form will be used 3 times in the application: To record sender information when registering a transaction. To record reciever information when registering a transaction. To explicitly register a new client. The requirements for this component are: The form should be able to query our api to check if the user who's name were typing is already in our records and then autofill its fields if they exist. The form should have a prop that can enable or disable the autofill capability. Table \u00b6 The table can be used to display various amounts of information. For the table component we will use Tanstack Tables so we don't have to implenent table functionility from scratch. Button \u00b6 State Management \u00b6 Check out a helpful Zustand tutorial here . The state management solution we will be using is zustand . Zustand is very simple and straightforward state management solution. Data Fetching \u00b6 Our data fetching stack will consist out of two libraries axios and react-query . axios is a http client that simplifies the concept of making http requests. react-query is a set of custom hooks that makes fetching, caching, and updating asynchronous or server state in React easy. An example of how these two libraries will work together in our project. axios is being used to get data from the jsonplaceholder API. file: src/services/post.service.ts import axios from \"axios\" ; export const getPosts = async () => { const res = await axios . get ( \"https://jsonplaceholder.typicode.com/posts\" ); return res . data ; }; file: src/app/query-example/page.tsx react-query is used to implement gather the data and the request completion status easily. For more information check out the react-query documentation 'use client'; import { getPosts } from \"@services/example.service\" import { useQuery } from \"react-query\" import ClockLoader from \"react-spinners/ClockLoader\"; const TestPage = () => { const { data: posts, isLoading } = useQuery<IPost[]>(\"posts\", getPosts) return <div className=\"flex flex-col gap-4 items-center justify-center\"> <h1 className=\"text-2xl\">React Query Example</h1> { <ClockLoader color=\"#fff\" loading={isLoading} size={90} aria-label=\"Loading Spinner\" data-testid=\"loader\" />} <div className=\"grid grid-cols-4 grid-flow-row gap-3\"> {posts && posts.map(({ id, title, body, userId }) => <div key={id} className=\"bg-green-500 flex flex-col p-4 gap-6\"> <span className=\"text-xl\"> {title} </span> <span> Posted By User: {userId} </span> <span> {body} </span> </div>)} </div> </div> The Backend \u00b6 when adding a custom fee the selected fee_id should be null in the transactions body Authentication \u00b6 Authorization \u00b6 TODO: write these doc sections *note: sender and receiver forms should autofill or make a new transfer record","title":"Speed Money Wise"},{"location":"project-documentation/speed-money-wise/#speed-money-wise-portal","text":"","title":"Speed Money Wise Portal"},{"location":"project-documentation/speed-money-wise/#what-is-the-project","text":"Speed Money Wise is a multinational financial services company, that enables clients to transfer money across the world almost instantaneously. The company currently uses WhatsApp to keep track of transactions made which has proven to be very inefficient. The solution we shall provide is a web portal that allows the company to efficiently administrate its transactions and keep track of the customers involved in those transactions. Next to those core functionalities, the system will also have settings that allow the administrator (superuser) to input supporting data for the transaction creation process and to manage the access control of the users in the system. Figure 1: High-Level Overview Of Process Flow","title":"What is the project?"},{"location":"project-documentation/speed-money-wise/#how-will-we-build-the-project","text":"The infrastructure of this project is split into 2 parts, the frontend, and the backend. Figure 2: High-Level Overview Of Project Infrastructure.","title":"How will we build the project?"},{"location":"project-documentation/speed-money-wise/#the-frontend","text":"To build the frontend for this project we will be using the Typescript version of Next.js 13 in combination with TailwindCSS . Furthermore, we will be using various other packages to aid in certain aspects of the project.","title":"The Frontend"},{"location":"project-documentation/speed-money-wise/#authentication","text":"For the authentication part of our frontend application, we will utilize NextAuth which provides us with an easy way to authenticate our users and maintain a user session across our application. The provider we\u2019ll be using is the CredentialsProvider . The authentication system we will implement is a combination of access tokens and refresh tokens. The user will log into the system with their credentials and receive an access token and a refresh token. The access token will expire in a short amount of time which will cause the client to request a new token with the refresh token. Figure 3: Authentication Process","title":"Authentication"},{"location":"project-documentation/speed-money-wise/#authorization","text":"There is a usePermission hook example","title":"Authorization"},{"location":"project-documentation/speed-money-wise/#user-interface","text":"The user interface of this application will be styled with TailwindCSS. The project will consist of a combination of completely custom-built components and some pre-built functional components that will be styled using tailwind. The libraries we'll be using for the \"headless\" components are Headless UI and Tanstack Table .","title":"User Interface"},{"location":"project-documentation/speed-money-wise/#components","text":"The components that will have to be built for this project are: Sidebar Client Form Table Button Etc... The goal is to reuse build components we can reuse many times within this project but also future projects.","title":"Components"},{"location":"project-documentation/speed-money-wise/#sidebar","text":"The sidebar component will be the main navigation component for this portal. The requirements for this component are: The component should accept items prop in which a config array can be passed. The sidebar will generate its sidebar item based on the objects in the array. The sidebar will use a permissions hook to determine if the user has the permissions to visit that route and will render based on that condition.","title":"Sidebar"},{"location":"project-documentation/speed-money-wise/#client-form","text":"The client form will be used to register client information. The form will be used 3 times in the application: To record sender information when registering a transaction. To record reciever information when registering a transaction. To explicitly register a new client. The requirements for this component are: The form should be able to query our api to check if the user who's name were typing is already in our records and then autofill its fields if they exist. The form should have a prop that can enable or disable the autofill capability.","title":"Client Form"},{"location":"project-documentation/speed-money-wise/#table","text":"The table can be used to display various amounts of information. For the table component we will use Tanstack Tables so we don't have to implenent table functionility from scratch.","title":"Table"},{"location":"project-documentation/speed-money-wise/#button","text":"","title":"Button"},{"location":"project-documentation/speed-money-wise/#state-management","text":"Check out a helpful Zustand tutorial here . The state management solution we will be using is zustand . Zustand is very simple and straightforward state management solution.","title":"State Management"},{"location":"project-documentation/speed-money-wise/#data-fetching","text":"Our data fetching stack will consist out of two libraries axios and react-query . axios is a http client that simplifies the concept of making http requests. react-query is a set of custom hooks that makes fetching, caching, and updating asynchronous or server state in React easy. An example of how these two libraries will work together in our project. axios is being used to get data from the jsonplaceholder API. file: src/services/post.service.ts import axios from \"axios\" ; export const getPosts = async () => { const res = await axios . get ( \"https://jsonplaceholder.typicode.com/posts\" ); return res . data ; }; file: src/app/query-example/page.tsx react-query is used to implement gather the data and the request completion status easily. For more information check out the react-query documentation 'use client'; import { getPosts } from \"@services/example.service\" import { useQuery } from \"react-query\" import ClockLoader from \"react-spinners/ClockLoader\"; const TestPage = () => { const { data: posts, isLoading } = useQuery<IPost[]>(\"posts\", getPosts) return <div className=\"flex flex-col gap-4 items-center justify-center\"> <h1 className=\"text-2xl\">React Query Example</h1> { <ClockLoader color=\"#fff\" loading={isLoading} size={90} aria-label=\"Loading Spinner\" data-testid=\"loader\" />} <div className=\"grid grid-cols-4 grid-flow-row gap-3\"> {posts && posts.map(({ id, title, body, userId }) => <div key={id} className=\"bg-green-500 flex flex-col p-4 gap-6\"> <span className=\"text-xl\"> {title} </span> <span> Posted By User: {userId} </span> <span> {body} </span> </div>)} </div> </div>","title":"Data Fetching"},{"location":"project-documentation/speed-money-wise/#the-backend","text":"when adding a custom fee the selected fee_id should be null in the transactions body","title":"The Backend"},{"location":"project-documentation/speed-money-wise/#authentication_1","text":"","title":"Authentication"},{"location":"project-documentation/speed-money-wise/#authorization_1","text":"TODO: write these doc sections *note: sender and receiver forms should autofill or make a new transfer record","title":"Authorization"},{"location":"project-setup/flutter-starter/","text":"","title":"Flutter starter"},{"location":"project-setup/nestjs-starter/","text":"Nest.js Setup Guide. \u00b6 Using these command line tools requires eigher a unix based system or git bash on Windows. This starter guide will help you set up your nestjs project with typescript and tailwind. Installation \u00b6 Create a new nest project with the nest cli and yarn. yarn add global @nestjs/cli nest new project-name \u00b6 enable cors setup prisma auth module","title":"NestJS Starter"},{"location":"project-setup/nestjs-starter/#nestjs-setup-guide","text":"Using these command line tools requires eigher a unix based system or git bash on Windows. This starter guide will help you set up your nestjs project with typescript and tailwind.","title":"Nest.js Setup Guide."},{"location":"project-setup/nestjs-starter/#installation","text":"Create a new nest project with the nest cli and yarn.","title":"Installation"},{"location":"project-setup/nestjs-starter/#yarn-add-global-nestjscli-nest-new-project-name","text":"enable cors setup prisma auth module","title":"yarn add global @nestjs/cli\nnest new project-name\n"},{"location":"project-setup/nextjs-starter/","text":"Next.js, Tailwind & Typescript Setup Guide. \u00b6 Using these command line tools requires either a unix based system or git bash on Windows. This starter guide will help you set up your nextjs project with typescript and tailwind. Installation \u00b6 Next Setup \u00b6 Create a new next project with the create-next-app script and yarn. while the /app directory is in beta. yarn create next-app my-project --ts --eslint --experimental-app after the /app directory is out of beta. yarn create next-app my-project --ts --eslint After you've created your next project make a src directory in the root of your project. mkdir src Then move the app,pages directories into the src directory. the -t, --target-directory=DIRECTORY flag for the mv command moves all SOURCE arguments into DIRECTORY mv -t src app pages After you've moved these directories to the src directory root of your project. Navigate into the directory and create these directories and add placeholder files. eg. hooks/hooks.placeholder src/ \u251c\u2500 components/ \u251c\u2500 config/ \u251c\u2500 hooks/ \u251c\u2500 interfaces/ \u251c\u2500 services/ \u251c\u2500 utils/ We will remove the placeholder files when we start using the directories. # naviagete to `src` directory cd src # make tconfig hooks interfaces services utils directories mkdir components config hooks interfaces services utils # add placeholder files to directories touch components/components.placeholder config/config.placeholder hooks/hooks.placeholder interfaces/interfaces.placeholder services/services.placeholder utils/utils.placeholder Typescript Setup \u00b6 Open your \"tsconfig.json\" file and add the following lines to your compilerOptions object: { \"compilerOptions\" : { ... \"incremental\" : true , /* --- start copy here --- */ \"baseUrl\" : \"src\" , \"paths\" : { \"@components/*\" : [ \"components/*\" ], \"@config/*\" : [ \"config/*\" ], \"@hooks/*\" : [ \"hooks/*\" ], \"@interfaces/*\" : [ \"components/*\" ], \"@services/*\" : [ \"services/*\" ], \"@styles/*\" : [ \"styles/*\" ], \"@images/*\" : [ \"assets/images/*\" ] }, /* --- end copy here ---*/ \"plugins\" : [ ... ], }, ... } Tailwind Setup \u00b6 By the time you're reading this the documentation of this section may have been changed. click here to checkout the latest version. Start by adding the tailwind dependencies and initialize the tailwind configuration. yarn add -D tailwindcss postcss autoprefixer yarn tailwindcss init -p Add the paths to all of your template files in your tailwind.config.js file. /** @type {import('tailwindcss').Config} */ module . exports = { content : [ \"./src/app/**/*.{js,ts,jsx,tsx}\" , \"./src/pages/**/*.{js,ts,jsx,tsx}\" , \"./src/components/**/*.{js,ts,jsx,tsx}\" , ], theme : { extend : {}, }, plugins : [], }; Add the @tailwind directives for each of Tailwind\u2019s layers to your app/globals.css file. @ tailwind base ; @ tailwind components ; @ tailwind utilities ; Configure your tailwind configuration to the needs of pojected templates /** @type {import('tailwindcss').Config} */ module . exports = { content : [ \"./src/app/**/*.{js,ts,jsx,tsx}\" , \"./src/pages/**/*.{js,ts,jsx,tsx}\" , \"./src/components/**/*.{js,ts,jsx,tsx}\" ] theme : { /* you can choose to override the default theme */ fontFamily : { ... }, fontSize : { ... }, /* or you can choose to extend the default theme */ extend : { backgroundImage : { ... }, colors : { ... }, screens : { ... }, gridAutoColumns : { ... } }, }, plugins : [], }; Start your build process. yarn run dev Structure \u00b6 In this chapter we'll be discussing the directory structure and code archictecture will be using in our Next.js projects. Directory Structure \u00b6 As an extension on the default Next.js directory structure we decided to place our directories in a src directory. This is to have a dedicated space where our code lives away from all the different project configuration files. The structure of our src directory is as follows: src/ \u251c\u2500 app/ \u251c\u2500 components/ \u251c\u2500 config/ \u251c\u2500 hooks/ \u251c\u2500 interfaces/ \u251c\u2500 services/ \u251c\u2500 utils/ App Directory \u00b6 Since the launch of Next 13 the app directory replaces the pages directory as the directory that handles the layouts and client-side routing. All components in the app directory are Server Components by default. To use Client Components inside the app directory have to use the \"use client\" directive at the top of our file. Components Directory \u00b6 In contrary to the app directory, the components directory houses our Client Components . The naming convention for this directory is [name of component].component.tsx . e.g. sidebar.component.tsx To read more about Client Components & Server Components click here . Config Directory \u00b6 The naming convention for this directory is [name of hook].tsx . e.g. usePermision Hooks Directory \u00b6 The hooks directory is where we store the custom hooks we create for our projects. The naming convention for this directory is [name of hook].tsx . e.g. usePermision.tsx Interfaces Directory \u00b6 The interfaces directory is where we store our interfaces. file: src/interfaces/posts.interface.tsx export interface IPost { id : number ; userId : number ; title : string ; body : string ; } export interface IPostComment { id : number ; userId : number ; title : string ; body : string ; } The naming convention for this directory is [name of resource]..ts . e.g. posts.interface.tsx By default the interfaces directory should have a index.ts file in which we import and export all of our other interfaces. file: src/interfaces/index.tsx export * from \"@interfaces/posts.interface.tsx\" ; When we import our interfaces in other files we can just import all of our interfaces from the index.tsx file. This concept is called Barrel Exporting . Services Directory \u00b6 The services directory is where we store our services. A service in this context is a class or group of methods that abstractify interaction with external libraries/API's. An example of a service method is: file: post.service.ts import axios from \"axios\" ; export const getPosts = async () => { const res = await axios . get ( \"https://jsonplaceholder.typicode.com/posts\" ); return res . data ; }; The naming convention for this directory is [name of resource].service.ts . e.g. user.service.ts, transfer.service.ts Utils Directory \u00b6 The utils directory houses any helper methods that want to create but don't belong to a particular category. The naming convention for this directory is [name of util].util.ts . e.g. user.util.ts, transfer.util.ts","title":"NextJS Starter"},{"location":"project-setup/nextjs-starter/#nextjs-tailwind-typescript-setup-guide","text":"Using these command line tools requires either a unix based system or git bash on Windows. This starter guide will help you set up your nextjs project with typescript and tailwind.","title":"Next.js, Tailwind &amp; Typescript Setup Guide."},{"location":"project-setup/nextjs-starter/#installation","text":"","title":"Installation"},{"location":"project-setup/nextjs-starter/#next-setup","text":"Create a new next project with the create-next-app script and yarn. while the /app directory is in beta. yarn create next-app my-project --ts --eslint --experimental-app after the /app directory is out of beta. yarn create next-app my-project --ts --eslint After you've created your next project make a src directory in the root of your project. mkdir src Then move the app,pages directories into the src directory. the -t, --target-directory=DIRECTORY flag for the mv command moves all SOURCE arguments into DIRECTORY mv -t src app pages After you've moved these directories to the src directory root of your project. Navigate into the directory and create these directories and add placeholder files. eg. hooks/hooks.placeholder src/ \u251c\u2500 components/ \u251c\u2500 config/ \u251c\u2500 hooks/ \u251c\u2500 interfaces/ \u251c\u2500 services/ \u251c\u2500 utils/ We will remove the placeholder files when we start using the directories. # naviagete to `src` directory cd src # make tconfig hooks interfaces services utils directories mkdir components config hooks interfaces services utils # add placeholder files to directories touch components/components.placeholder config/config.placeholder hooks/hooks.placeholder interfaces/interfaces.placeholder services/services.placeholder utils/utils.placeholder","title":"Next Setup"},{"location":"project-setup/nextjs-starter/#typescript-setup","text":"Open your \"tsconfig.json\" file and add the following lines to your compilerOptions object: { \"compilerOptions\" : { ... \"incremental\" : true , /* --- start copy here --- */ \"baseUrl\" : \"src\" , \"paths\" : { \"@components/*\" : [ \"components/*\" ], \"@config/*\" : [ \"config/*\" ], \"@hooks/*\" : [ \"hooks/*\" ], \"@interfaces/*\" : [ \"components/*\" ], \"@services/*\" : [ \"services/*\" ], \"@styles/*\" : [ \"styles/*\" ], \"@images/*\" : [ \"assets/images/*\" ] }, /* --- end copy here ---*/ \"plugins\" : [ ... ], }, ... }","title":"Typescript Setup"},{"location":"project-setup/nextjs-starter/#tailwind-setup","text":"By the time you're reading this the documentation of this section may have been changed. click here to checkout the latest version. Start by adding the tailwind dependencies and initialize the tailwind configuration. yarn add -D tailwindcss postcss autoprefixer yarn tailwindcss init -p Add the paths to all of your template files in your tailwind.config.js file. /** @type {import('tailwindcss').Config} */ module . exports = { content : [ \"./src/app/**/*.{js,ts,jsx,tsx}\" , \"./src/pages/**/*.{js,ts,jsx,tsx}\" , \"./src/components/**/*.{js,ts,jsx,tsx}\" , ], theme : { extend : {}, }, plugins : [], }; Add the @tailwind directives for each of Tailwind\u2019s layers to your app/globals.css file. @ tailwind base ; @ tailwind components ; @ tailwind utilities ; Configure your tailwind configuration to the needs of pojected templates /** @type {import('tailwindcss').Config} */ module . exports = { content : [ \"./src/app/**/*.{js,ts,jsx,tsx}\" , \"./src/pages/**/*.{js,ts,jsx,tsx}\" , \"./src/components/**/*.{js,ts,jsx,tsx}\" ] theme : { /* you can choose to override the default theme */ fontFamily : { ... }, fontSize : { ... }, /* or you can choose to extend the default theme */ extend : { backgroundImage : { ... }, colors : { ... }, screens : { ... }, gridAutoColumns : { ... } }, }, plugins : [], }; Start your build process. yarn run dev","title":"Tailwind Setup"},{"location":"project-setup/nextjs-starter/#structure","text":"In this chapter we'll be discussing the directory structure and code archictecture will be using in our Next.js projects.","title":"Structure"},{"location":"project-setup/nextjs-starter/#directory-structure","text":"As an extension on the default Next.js directory structure we decided to place our directories in a src directory. This is to have a dedicated space where our code lives away from all the different project configuration files. The structure of our src directory is as follows: src/ \u251c\u2500 app/ \u251c\u2500 components/ \u251c\u2500 config/ \u251c\u2500 hooks/ \u251c\u2500 interfaces/ \u251c\u2500 services/ \u251c\u2500 utils/","title":"Directory Structure"},{"location":"project-setup/nextjs-starter/#app-directory","text":"Since the launch of Next 13 the app directory replaces the pages directory as the directory that handles the layouts and client-side routing. All components in the app directory are Server Components by default. To use Client Components inside the app directory have to use the \"use client\" directive at the top of our file.","title":"App Directory"},{"location":"project-setup/nextjs-starter/#components-directory","text":"In contrary to the app directory, the components directory houses our Client Components . The naming convention for this directory is [name of component].component.tsx . e.g. sidebar.component.tsx To read more about Client Components & Server Components click here .","title":"Components Directory"},{"location":"project-setup/nextjs-starter/#config-directory","text":"The naming convention for this directory is [name of hook].tsx . e.g. usePermision","title":"Config Directory"},{"location":"project-setup/nextjs-starter/#hooks-directory","text":"The hooks directory is where we store the custom hooks we create for our projects. The naming convention for this directory is [name of hook].tsx . e.g. usePermision.tsx","title":"Hooks Directory"},{"location":"project-setup/nextjs-starter/#interfaces-directory","text":"The interfaces directory is where we store our interfaces. file: src/interfaces/posts.interface.tsx export interface IPost { id : number ; userId : number ; title : string ; body : string ; } export interface IPostComment { id : number ; userId : number ; title : string ; body : string ; } The naming convention for this directory is [name of resource]..ts . e.g. posts.interface.tsx By default the interfaces directory should have a index.ts file in which we import and export all of our other interfaces. file: src/interfaces/index.tsx export * from \"@interfaces/posts.interface.tsx\" ; When we import our interfaces in other files we can just import all of our interfaces from the index.tsx file. This concept is called Barrel Exporting .","title":"Interfaces Directory"},{"location":"project-setup/nextjs-starter/#services-directory","text":"The services directory is where we store our services. A service in this context is a class or group of methods that abstractify interaction with external libraries/API's. An example of a service method is: file: post.service.ts import axios from \"axios\" ; export const getPosts = async () => { const res = await axios . get ( \"https://jsonplaceholder.typicode.com/posts\" ); return res . data ; }; The naming convention for this directory is [name of resource].service.ts . e.g. user.service.ts, transfer.service.ts","title":"Services Directory"},{"location":"project-setup/nextjs-starter/#utils-directory","text":"The utils directory houses any helper methods that want to create but don't belong to a particular category. The naming convention for this directory is [name of util].util.ts . e.g. user.util.ts, transfer.util.ts","title":"Utils Directory"}]}